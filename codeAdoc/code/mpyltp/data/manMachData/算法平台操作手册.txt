
1.目的：
本《用户手册》将向用户详细介绍智能算法平台的监控系统，并帮助用户迅速配置和使用该软件。通过本手册，您将学会如何使用该软件提供的各种功能，并获得您在软件使用中遇到的问题的解决方法以及取得资源与帮助的渠道。
1.1.阅读对象：
本手册的编写对象为智能算法平台的管理者，负责监控整个平台的运行情况。手册也面向本项目的管理人员、开发人员和测试人员。
1.2.如何使用本手册：
您既可以按顺序阅读每一章节，也可根据目录索引中的词条直接获得所需的信息。
1.3.相关文档：
人脸考勤软件提供多种电子格式的用户手册。用户手册的内容随系统功能的更新而更为完整，请您使用与系统版本相对应的用户手册，并按改手册的说明进行操作。
1.4.约定：
本手册采用以下记号进行说明描述：
----->>指示软件运行流程的方向；
“控件a”---->“控件b”表示操作顺序，先单击控件a，再单击控件b；
“控件a”：（作用）	楷体字表述控件的作用；
（操作）用括号括起来的操作表示可执行也可不执行，视具体情况而定；
文件夹名：斜粗体字表示文件夹名；
a. b. c. …	操作步骤用小写字母标记；
 圆圈显示图片中需要加以注意的地方；

2.软件概述
2.1.建设背景：
目前，随着人工智能行业如火如荼地发展，大量的应用于人工智能行业的智能算法应用投入到市场和人们的日常生活中，涉及的场景很广泛，涵盖如如人脸识别、值守检测、特种装备识别、上课专注度识别、姿态识别等等，使用的对象也五花八门，如学校、水利公司、建筑公司、安保公司等，一个公司可能使用着几个甚至数十个的人工智能应用，在管理应用上可能就要耗费大量的人力物力，因此有一个管理的平台对于公司来说十分重要。
随着分布式计算的广泛应用，催生了一系列优秀的分布式架构，受到广泛应用的应该是由谷歌开源的容器编排引擎——Kubernetes了，它支持自动化部署、大规模可伸缩、应用容器化管理。在生产环境中部署一个应用程序时，通常要部署该应用的多个实例以便对应用请求进行负载均衡。在Kubernetes中，我们可以创建多个容器，每个容器里面运行一个应用实例，然后通过内置的负载均衡策略，实现对这一组应用实例的管理、发现、访问，而这些细节都不需要运维人员去进行复杂的手工配置和处理。
2.2.建设目标：
本平台是基于Kubernetes进行开发，实现对智能算法应用的分布式和自动化部署、管理和监控。
传统的基于容器的开发要从镜像加载开始，然后配置容器名字、映射端口、持久化存储、容器启动命令到一条指令中，生成一个可以让用户使用的端口供用户调用。但是在容器崩坏的时候，或者容器无法启动的时候，需要出动人力去对其进行维护、重启，并且还有可能丢失数据，这种现象广泛出现在开发环境中，但是不适用于生产环境。
而在本平台中，处于Kubernetes环境中的所有机器可以看作是一个集群，集群内所有机器都的资源，包括CPU、内存、磁盘等都处于平台的监控中，用户可以将算法上传到集群中并由平台进行管理，平台会自动将算法进行部署和测试，并返回可调用接口供用户使用，在容器崩坏的时候，平台会有相应的策略对其进行重启，或是开启备用容器，数据不会丢失。用户只需要在页面中进行简单的操作即可。
2.3.功能和特点：
本项目主要是提供一个对集群资源、算法情况进行监控的平台，其功能特点主要有：
对整体集群所有资源，包括CPU、内存、磁盘、显卡数量、部署算法数量等指标进行监控。
对于集群中每一台计算机（以下称为节点），获取其所有信息，除上述资源外，还包括机器ID、主机名、局域网IP地址、在线状态、运行状态和算法数量等。
对于每一个算法的应用，有专用的本地仓库存储算法镜像，保存算法的信息如算法名称、映射端口、CPU上限、内存上限、启动命令等。
允许添加和删除算法，允许修改算法的配置。
允许上传算法的资料，如镜像文件、接口文件。

2.4.方案设计依据：
GB9566—88《计算机软件开发规范》
GB8567—88《计算机软件产品开发文件编制指南》
2.5.获取技术支持：
技术支持的内容包括：产品升级、使用教程与培训、维护、软件错误反馈等。用户取得详细技术支持信息的渠道为软件的帮助文件、操作手册等。
 
3.依赖环境：
3.1.硬件设备：
机器角色：CPU、显卡、内存、磁盘分别推荐为
i5-6500 及以上、无需显卡、16G 及以上、1TB 及以上
集群机器推荐为：i7-8700 及以上
算法要求配置：32G 及以上、1TB 及以上

3.2.软件环境：
操作系统：Ubuntu16.04/18.04操作系统
4.环境配置:
4.1.前端环境配置(Ubuntu):
a. 主要是Node的环境，上官网选择Linux x64的二进制文件，下载完之后在目录下打开终端，执行命令xz -d <二进制文件名>，会得到一个tar的压缩包，然后执行命令，tar -zxvf <压缩包名字>，就获得了Node的程序文件夹。
b. 配置环境变量，以root身份打开~/.bashrc，在最后一行加入export PATH=$PATH:<Node文件夹路径>/bin，保存后执行命令source ~/.bashrc，在root身份就可以执行node -v和npm等指令了。
c. 安装cnpm和yarn，cnpm用npm安装，npm install -g cnpm，安装完成后用cnpm安装yarn，cnpm install -g yarn
4.2.后端环境配置(Ubuntu）:
a. 主要是Java JDK环境，上官网选择一个版本的JDK下载，下载完之后在目录下打开终端，执行命令tar -zxvf <JDK压缩包名字>，得到JDK文件夹。
b. 配置环境变量，以root身份打开~/.bashrc，在最后一行加入export JAVA_HOME=<JD文件夹路径>，export CLASSPATH=.:$JAVA_HOME/bin，export PATH=JAVA_HOME/bin:$PATH，保存后执行命令source ~/.bashrc，在root身份就可以执行java --version。
4.3.Kubernetes配置:
详情请看附录，建议让相关专业人士配置。
5.使用指南:
5.1.概述:
本节将详细说明监控平台的使用方法，主要是包含集群资源的监控、各节点的监控和算法监控。在使用以下功能之前，需要先进行用户登陆，目前用户级均为管理员级别。
5.2.集群监控:
5.2.1.运行流程:
集群监控的主要流程为监控整个集群的资源信息，包括节点个数、算法个数、总体资源总量和使用量，集群信息是30s更新一次，用户可以选择让集群中结点按某一资源使用量进行排序显示，也可以查看集群的资源使用率折线图，观察资源的使用情况。
5.3.节点监控:
5.3.1.运行流程:
    节点监控主要流程为一览节点资源信息，并且可以访问特定节点信息，包括IP、在线状态、运行状态、算法部署情况等等，可以通过折线图观察某节点在一段时间内CPU、内存平均使用率、磁盘平均吞吐率等，暂时只支持删除某一节点。

5.4.算法管理:
5.4.1.运行流程:
算法管理的主要流程为一览部署在平台的算法，支持算法上传和删除，查看算法部署配置和运行情况、占用资源、运行次数、最后调用时间等，修改算法配置，查看算法的使用文档，流程图如下：


出错处理:
验证码无法出现：后端服务出错；
后端未正常运行：重启后端服务；
集群、节点资源无法更新：后端服务出错；

Kubernetes未正常运行：重启电脑，重启后端服务；

